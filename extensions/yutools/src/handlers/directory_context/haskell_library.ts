import * as vscode from 'vscode';
import { extension_name } from '../../constants';
import { applyReplacements, processCommandWithMap } from '../stringutils';
import { run_fmus_at_specific_dir } from '../fmus_ketik';
import { createNewTerminal } from '../terminal';
import { getBasename } from '../file_dir';


const command_v1 = `echo __VAR1__`;

const fmus_code_wrapper = `
--% BACA.md
dummy baca md
--#
`;

const fmus_command = `.,d
	%DIR_PROYEK=__VAR1__
	DIR_PROYEK,d
		src,d
		run.bat,f(n=ls -al)
		main.dart,f(e=C:\\ai\\aide\\extensions\\yutools\\src\\commands\\directory_context\\android_kotlin.ts=BACA.md)
`;

export function register_dir_context_create_haskell_library(context: vscode.ExtensionContext) {
	let disposable = vscode.commands.registerCommand(
		`${extension_name}.register_dir_context_create_haskell_library`,
		async (uri: vscode.Uri) => {
			const filePath = uri.fsPath;
			const terminal_name = getBasename(filePath);

			const result_map = await processCommandWithMap(command_v1);
			if (result_map === undefined) {
				vscode.window.showErrorMessage(`Process was canceled. No command to execute.`);
			} else {
				console.log('Processed Result:', result_map.result);
				console.log('Map:', result_map.map);

				const terminal = createNewTerminal(terminal_name, filePath);
				terminal.sendText(result_map.result);
				const fmus_command_replaced = applyReplacements(fmus_command, result_map.map);
				run_fmus_at_specific_dir(fmus_command_replaced, filePath);
				terminal.sendText(applyReplacements(`cd __VAR1__ && dir *.bat`, result_map.map));
			}
		});
	context.subscriptions.push(disposable);
}


const information = `
Here's a list of steps and commands you can follow to create a Haskell library project from start to finish. I've included both CLI commands and activities that should be performed as part of the development process.

### 1. **Install Stack (if not already installed)**
	**Command**:
	bash
	curl -sSL https://get.haskellstack.org/ | sh


### 2. **Create a New Haskell Project**
	**Command**:
	bash
	stack new my-library


### 3. **Navigate to the Project Directory**
	**Command**:
	bash
	cd my-library


### 4. **Modify the Project as a Library**
	**Activity**:
	- Open package.yaml or my-library.cabal and configure it as a library by removing the executable section and defining the library section.
	- Ensure you specify the exposed modules and other metadata.

### 5. **Edit Library Source Code**
	**Activity**:
	- Edit the src/ folder to include your modules and library logic.
	- The default module file is typically src/Lib.hs.

### 6. **Update Dependencies (if needed)**
	**Command**:
	bash
	stack add <package-name>


### 7. **Build the Project**
	**Command**:
	bash
	stack build


### 8. **Run Tests (if tests are written)**
	**Activity**:
	- Write tests in the test/ directory, typically in Spec.hs or a similar structure.

	**Command**:
	bash
	stack test


### 9. **Create Documentation**
	**Command**:
	bash
	stack haddock --open


### 10. **Check Formatting and Linting (optional but recommended)**
	**Command**:
	bash
	stack exec hlint src/


### 11. **Publish the Library (if publishing to Hackage)**
	**Activity**:
	- Ensure you have a my-library.cabal file (generated by Stack) with all necessary fields filled out.
	- Register an account on [Hackage](https://hackage.haskell.org/).

	**Command**:
	bash
	stack upload .


### 12. **Continuous Development Cycle** (Iterate):
	- **Edit files**: Continue editing source code and tests.
	- **Run stack build** to rebuild.
	- **Run stack test** to check tests.
	- **Run stack haddock** to regenerate documentation.

This workflow outlines the general steps to follow when developing and releasing a Haskell library project.
`;

**You are to generate a project of a specified type (e.g., Django, Node/Express, Vue) and represent it using the FMUS format. The FMUS format allows you to represent an entire project's filesystem structure and content in a single text file with ".fmus" extension, making it easy to share or version control.**

#### **Key Assumptions:**

1. **Enterprise-Grade Applications:**
   - The project should include advanced features suitable for enterprise applications (e.g., middleware, database integration, authentication, logging, etc.).
   - Assume default values for all configurations (e.g., port numbers, project names) to minimize user intervention.
   - Use the latest versions of all frameworks, libraries, and tools.

2. **Minimal User Input:**
   - Do not ask for user input. Instead, follow conventions and best practices for enterprise applications.
   - If the user prompt is vague, assume the user wants a fully functional enterprise application and generate accordingly.

3. **Binary Files:**
   - Binary files (e.g., images, compiled code) should be base64 encoded if included. However, prioritize text files as binary files are typically added manually by the user.

4. **Output Format:**
   - Generate the FMUS file directly without a preview or editing step.
   - Ensure the file content is not simplistic and meets enterprise standards.

---

#### **FMUS Format Specifications:**

1. **FMUS Entries:**
   - Each file or directory is represented as an "FMUS entry" separated by an empty line.
   - There is a special entry called `index/fmus` that acts as the main entry.

2. **FMUS Entry Structure:**
   - **Prefix**: `--% <title>`
     - `--%` is the start tag.
     - `<title>` is the file path or `index/fmus`.
   - **Content**: Any multiline text content following the prefix.
   - **Suffix**: `--#`
     - `--#` is the end tag.

3. **Example of an FMUS Entry:**
   ```
   --% ./src/index.js
   // print hello to console
   console.log('hello, world!');
   --#
   ```

4. **Index/FMUS Entry:**
   - Contains a DSL called fmuslang, which is a tree-based language for representing the directory structure and file references.
   - The root is represented as `__ROOT_NODE__,d`.
   - Directories end with `,d` and files with `,f` followed by `(e=__REFERENCE_TO_FMUS_FILEPATH__=<title>)`.

5. **Example of Index/FMUS:**
   ```
   --% index/fmus
   __ROOT_NODE__,d
     %__REFERENCE_TO_FMUS_FILEPATH__=__FILE_NODE__
     package.json,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./package.json)
     src,d
       index.js,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./src/index.js)
   --#
   ```

---

#### **Task:**

1. **Generate an Enterprise-Grade Project:**
   - Choose a type of project (e.g., Django, Node/Express, Vue) based on the userâ€™s prompt.
   - Create the necessary files and directories for a fully functional enterprise application.
   - Include advanced features such as authentication, database integration, logging, and middleware.

2. **Write the Project in FMUS Format:**
   - Use the FMUS format specifications to represent the filesystem structure and the content of all text files in a single `.fmus` file.
   - Ensure the file content is not simplistic and meets enterprise standards.

---

#### **Example Projects:**

1. **Node/Express Project:**
   - `index.js`: Entry point for the Node/Express application.
   - `package.json`: Contains metadata about the project.
   - `routes/`: Directory containing route handlers.
   - `middleware/`: Directory for custom middleware.
   - `config/`: Directory for configuration files (e.g., database, logging).
   - `models/`: Directory for database models.
   - `utils/`: Directory for utility functions.

2. **Vue Project:**
   - `src/main.js`: Entry point for the Vue application.
   - `src/App.vue`: Main component of the Vue application.
   - `src/router/`: Directory for Vue Router configuration.
   - `src/store/`: Directory for Vuex store (state management).
   - `src/components/`: Directory for reusable components.
   - `public/index.html`: The HTML template.

---

#### **Example File Contents for a Node/Express Project:**

1. **index.js:**
   ```javascript
   const express = require('express');
   const mongoose = require('mongoose');
   const logger = require('./utils/logger');
   const routes = require('./routes');
   const config = require('./config');

   const app = express();
   const port = config.port || 3000;

   // Middleware
   app.use(express.json());
   app.use(logger);

   // Database connection
   mongoose.connect(config.database.uri, config.database.options)
     .then(() => console.log('Connected to database'))
     .catch((err) => console.error('Database connection error:', err));

   // Routes
   app.use('/api', routes);

   app.listen(port, () => {
     console.log(`Server running at http://localhost:${port}`);
   });
   ```

2. **package.json:**
   ```json
   {
     "name": "express-app",
     "version": "1.0.0",
     "description": "A simple Express application",
     "main": "index.js",
     "scripts": {
       "start": "node index.js",
       "dev": "nodemon index.js"
     },
     "dependencies": {
       "express": "^4.17.1",
       "mongoose": "^6.0.0",
       "winston": "^3.3.3"
     },
     "devDependencies": {
       "nodemon": "^2.0.12"
     }
   }
   ```

3. **index/fmus:**
   ```
   --% index/fmus
   __ROOT_NODE__,d
     %__REFERENCE_TO_FMUS_FILEPATH__=__FILE_NODE__
     package.json,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./package.json)
     index.js,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./index.js)
     config,d
       database.js,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./config/database.js)
     routes,d
       index.js,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./routes/index.js)
     utils,d
       logger.js,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./utils/logger.js)
   --#
   ```

---

#### **Expected FMUS Representation for a Node/Express Project:**

```
--% index/fmus
__ROOT_NODE__,d
  %__REFERENCE_TO_FMUS_FILEPATH__=__FILE_NODE__
  package.json,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./package.json)
  index.js,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./index.js)
  config,d
    database.js,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./config/database.js)
  routes,d
    index.js,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./routes/index.js)
  utils,d
    logger.js,f(e=__REFERENCE_TO_FMUS_FILEPATH__=./utils/logger.js)
--#

--% ./index.js
const express = require('express');
const mongoose = require('mongoose');
const logger = require('./utils/logger');
const routes = require('./routes');
const config = require('./config');

const app = express();
const port = config.port || 3000;

// Middleware
app.use(express.json());
app.use(logger);

// Database connection
mongoose.connect(config.database.uri, config.database.options)
  .then(() => console.log('Connected to database'))
  .catch((err) => console.error('Database connection error:', err));

// Routes
app.use('/api', routes);

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
--#

--% ./package.json
{
  "name": "express-app",
  "version": "1.0.0",
  "description": "A simple Express application",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "mongoose": "^6.0.0",
    "winston": "^3.3.3"
  },
  "devDependencies": {
    "nodemon": "^2.0.12"
  }
}
--#
```

Here's the user specification for the project you have to generate:
---
